<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2011, Red Hat, Inc. and/or its affiliates, and individual
  contributors by the @authors tag. See the copyright.txt in the
  distribution for a full listing of individual contributors.
 
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
   "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" []>
<chapter id="mapping-interfaces">
   <title>Annotation Routing APIs</title>

   <para>
      This chapter is meant to describe the behavior of mapping interfaces, where event mapping to data flowing through
      JMS Queues and Topics are handled via events.  Currently, the mapping interfaces only support single direction
      mappings, a route defined can only be one of egress or ingress, never both.
   </para>
   <tip>
       You should never create a bi-directional route via the API.  The results will not be what you expect.
   </tip>

   <section id="obs-methods">
       <title>Observer Method Interfaces</title>
       <para>
           Observer Method Interfaces are simple Plain Old Java Interfaces (POJIs) that define either an ingress or
           an egress route.  This is a sample interface:
       </para>
       <programlisting role="Java">
           public interface MappingInterface {
               @Routing(RouteType.INGRESS)
               public void routeStringsFromTopic(@Observes String s, @JmsDestination(jndiName="jms/MyTopic") Topic t);
               
               @Routing(RouteType.EGRESS)
               public void routeLongsToQueue(@Observes Long l, @JmsDestination(jndiName="jms/MyQueue") Queue q);
           }
       </programlisting>
       <para>
           This interface defines two routes.  One being an ingress route - messages coming in to the topic jms/MyTopic
           will be fired as events with the type String.  The second being an egress route - events fired of type Long will
           be turned into ObjectMessages and using a MessageProducer sent to the queue jms/MyQueue.
       </para>
       <para>
           The object being observed can have qualifiers.  These qualifiers will be carried over in the fired event and follow
           the CDI rules for observer method selection.  In all cases, the return type of the method is ignored.
       </para>
       <para>
           The destinations can have any qualifier.  In addition, there is basic support for @Resource on the method level to
           define the destination.  This in general not 100% portable from the application developer perspective, we recommend
           heavy testing of the behavior on your application server.
       </para>
       <tip>
           In JBoss AS 6, if the return type is void, the mapping will generally fail (when using @Resource).  You can change the return type to another
           object to make it pass.
       </tip>
   </section>

   <section id="message-handlers">
       <title>Mapping Messages to Events</title>
       <para>
           In addition to the listed types, you can also observe JMS messages that are coming in.  You simply define the route the same way you would in an observer method interface.
       </para>
       <programlisting role="Java">
           public interface MappingInterface {
               @Routing(RouteType.INGRESS)
               public void routeStringsFromTopic(@Observes @JmsDestination(jndiName="jms/MyTopic") TextMessage textMessage, @JmsDestination(jndiName="jms/MyTopic") Topic t);
           }
       </programlisting>
       <tip>
           In this special case, only ingress routes will work correctly.
       </tip>
   </section>
</chapter>
