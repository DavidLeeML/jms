<?xml version="1.0" encoding="UTF-8"?>
<!--
  JBoss, Home of Professional Open Source
  Copyright 2010, Red Hat, Inc., and individual contributors
  by the @authors tag. See the copyright.txt in the distribution for a
  full listing of individual contributors.
  
  This is free software; you can redistribute it and/or modify it
  under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2.1 of
  the License, or (at your option) any later version.
  
  This software is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Lesser General Public License for more details.
  
  You should have received a copy of the GNU Lesser General Public
  License along with this software; if not, write to the Free
  Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
  02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
   "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd" []>
<chapter id="routing">
   <title>Bridging the Gap</title>

   <para>
      This chapter is designed to detail how to configure the CDI to JMS event bridge.  Routing has two sides, sending
      of events to JMS destinations and translating received messages from JMS destinations back into CDI events.  The
      sections of this chapter will describe how to achieve both.
   </para>
   
   <section id="routing.bridge">
      <title>Event Routing</title>
      
      <para>
         Simply sending or receiving a message over JMS involves a few players:  Connection, Session, Destination, and
         the message itself.  Surely you can inject all required resources and perform the routing yourself but that 
         takes away from the whole reason you're using a tool in the first place!  Let's let a little configuration do 
         the work for us.
      </para>
      
      <section id="routing.bridge.route">
         <title>Routes</title>
         
         <para>
            Routing CDI events to and from JMS can be configured by defining a <literal>Route</literal>. As you would
            normally create an observer method for an event you can define a route to control which events get 
            forwarded to what destination.  Or conversely, what message types sent to which destinations generate CDI 
            events.

            <programlisting role="Java">public interface Route
   {
      public &lt;D extends Destination&gt; Route connectTo(Class&lt;D&gt; d, D destination);
      public Route addQualifiers(Annotation... qualifiers);
   }</programlisting>
         </para>

         <para>
            Routes allows for simple mapping of event types, complete with qualifiers, to a set of destinations.  They 
            can be configured by adding qualifiers and providing destinations they should interact with and are created
            from an <literal>EventBridge</literal>. Here's a simple route that forwards CDI events on to a queue:
            
            <programlisting role="Java">@Inject EventBridge bridge;
@EventRouting public Route registerMyRoute()
{
   return bridge.createRoute(RouteType.EGRESS, MyEvent.class).connectTo(Queue.class, myQueue);
}</programlisting>
         </para>
      </section>
      
      <section id="routing.bridge.eventrouting">
         <title>@EventRouting</title>

         <para>
            Routes are registered by returning them from a bean method annotated with <literal>@EventRouting</literal>:
            
            <programlisting role="Java">@Inject EventBridge bridge;
@EventRouting public Route myConfig()
{
   return bridge.createRoute(RouteType.INGRESS, MyEvent.class).connectTo(Queue.class, myTopic);
}</programlisting>
         </para>
      </section>
   </section>

   <section id="routing.egress">
      <title>Routing CDI Events to JMS</title>

      <para>
         Forwarding CDI events to JMS is configured by creating an egress route.  Let's say you wanted to forward all
         <literal>MyEvent</literal> events with <literal>@Bridged</literal> qualifier to the queue 
         <literal>jms/EventQueue</literal>.  Simple,  register a route:
         
         <programlisting role="Java">@Inject EventBridge bridge;
@Inject @JmsDestination(jndiName="jms/EventQueue") Queue eventQueue;
AnnotationLiteral&lt;Bridged&gt; BRIDGED = new AnnotationLiteral&lt;Bridged&gt;() {};
@EventRouting public Route registerMyEventRoute()
{
   return bridge.createRoute(RouteType.EGRESS, MyEvent.class).addQualifiers(BRIDGED).connectTo(Queue.class, eventQueue);
}</programlisting>
      </para>

      <section id="routing.egress.usage">
      
         <title>Usage</title>
         <para>
            With your routing defined you can simply fire events that match the route's payload type and
            qualifiers and these events will be forwarded over JMS as object messages.
            
            <programlisting role="Java">@Inject @Bridged Event&lt;MyEvent&gt; event;
...
event.fire(myEvent);</programlisting>
         </para>
      </section>
   </section>

   <section id="routing.ingress">
      <title>CDI Events from JMS Messages</title>

      <para>
         TODO Add documentation when implemented
      </para>
   </section>
</chapter>
   